
// Generated from snuqasm.g4 by ANTLR 4.12.0


#include "snuqasmLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct SnuqasmLexerStaticData final {
  SnuqasmLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  SnuqasmLexerStaticData(const SnuqasmLexerStaticData&) = delete;
  SnuqasmLexerStaticData(SnuqasmLexerStaticData&&) = delete;
  SnuqasmLexerStaticData& operator=(const SnuqasmLexerStaticData&) = delete;
  SnuqasmLexerStaticData& operator=(SnuqasmLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag snuqasmlexerLexerOnceFlag;
SnuqasmLexerStaticData *snuqasmlexerLexerStaticData = nullptr;

void snuqasmlexerLexerInitialize() {
  assert(snuqasmlexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<SnuqasmLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
      "T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "T__63", "StringLiteral", 
      "PlusMinus", "SciNotation", "Digit", "StartLetter", "AnyLetter", "DigitNonZero", 
      "Real", "Integer", "Decimal", "SciSuffix", "Identifier", "Whitespace", 
      "Newline", "LineComment", "BlockComment"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'SNUQASM'", "';'", "'include'", "'qreg'", "'['", "']'", "'creg'", 
      "'gate'", "'{'", "'}'", "'('", "')'", "'opaque'", "'measure'", "'->'", 
      "'reset'", "'if'", "'=='", "'barrier'", "'U'", "'u'", "'CX'", "','", 
      "'id'", "'h'", "'x'", "'y'", "'z'", "'sx'", "'sy'", "'s'", "'sdg'", 
      "'t'", "'tdg'", "'rx'", "'ry'", "'rz'", "'u1'", "'u2'", "'u3'", "'swap'", 
      "'cx'", "'cy'", "'cz'", "'ch'", "'crx'", "'cry'", "'crz'", "'cu1'", 
      "'cu2'", "'cu3'", "'ccx'", "'pi'", "'-'", "'+'", "'*'", "'/'", "'^'", 
      "'sin'", "'cos'", "'tan'", "'exp'", "'ln'", "'sqrt'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "StringLiteral", 
      "Real", "Integer", "Decimal", "SciSuffix", "Identifier", "Whitespace", 
      "Newline", "LineComment", "BlockComment"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,74,489,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,
  	1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,
  	6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,
  	1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,
  	1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,20,1,20,
  	1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
  	1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,31,
  	1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,
  	1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
  	1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,
  	1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,
  	1,48,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,
  	1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,
  	1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,
  	1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,4,64,385,8,64,11,64,
  	12,64,386,1,64,1,64,1,64,4,64,392,8,64,11,64,12,64,393,1,64,3,64,397,
  	8,64,1,65,1,65,1,66,1,66,1,67,1,67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,
  	1,71,3,71,413,8,71,1,72,4,72,416,8,72,11,72,12,72,417,1,73,1,73,1,73,
  	5,73,423,8,73,10,73,12,73,426,9,73,1,73,5,73,429,8,73,10,73,12,73,432,
  	9,73,1,73,1,73,3,73,436,8,73,1,74,1,74,3,74,440,8,74,1,74,1,74,1,75,1,
  	75,5,75,446,8,75,10,75,12,75,449,9,75,1,76,4,76,452,8,76,11,76,12,76,
  	453,1,76,1,76,1,77,4,77,459,8,77,11,77,12,77,460,1,77,1,77,1,78,1,78,
  	1,78,1,78,5,78,469,8,78,10,78,12,78,472,9,78,1,78,1,78,1,79,1,79,1,79,
  	1,79,5,79,480,8,79,10,79,12,79,483,9,79,1,79,1,79,1,79,1,79,1,79,3,386,
  	393,481,0,80,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
  	25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
  	24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
  	71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,
  	47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,
  	115,58,117,59,119,60,121,61,123,62,125,63,127,64,129,65,131,0,133,0,135,
  	0,137,0,139,0,141,0,143,66,145,67,147,68,149,69,151,70,153,71,155,72,
  	157,73,159,74,1,0,10,3,0,9,10,13,13,34,34,3,0,9,10,13,13,39,39,2,0,43,
  	43,45,45,2,0,69,69,101,101,1,0,48,57,1,0,97,122,4,0,48,57,65,90,95,95,
  	97,122,1,0,49,57,2,0,9,9,32,32,2,0,10,10,13,13,496,0,1,1,0,0,0,0,3,1,
  	0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
  	15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
  	0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
  	0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,
  	47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
  	0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
  	0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,
  	79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
  	0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,
  	0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
  	0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,
  	0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,
  	0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,
  	0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,1,161,1,0,0,
  	0,3,169,1,0,0,0,5,171,1,0,0,0,7,179,1,0,0,0,9,184,1,0,0,0,11,186,1,0,
  	0,0,13,188,1,0,0,0,15,193,1,0,0,0,17,198,1,0,0,0,19,200,1,0,0,0,21,202,
  	1,0,0,0,23,204,1,0,0,0,25,206,1,0,0,0,27,213,1,0,0,0,29,221,1,0,0,0,31,
  	224,1,0,0,0,33,230,1,0,0,0,35,233,1,0,0,0,37,236,1,0,0,0,39,244,1,0,0,
  	0,41,246,1,0,0,0,43,248,1,0,0,0,45,251,1,0,0,0,47,253,1,0,0,0,49,256,
  	1,0,0,0,51,258,1,0,0,0,53,260,1,0,0,0,55,262,1,0,0,0,57,264,1,0,0,0,59,
  	267,1,0,0,0,61,270,1,0,0,0,63,272,1,0,0,0,65,276,1,0,0,0,67,278,1,0,0,
  	0,69,282,1,0,0,0,71,285,1,0,0,0,73,288,1,0,0,0,75,291,1,0,0,0,77,294,
  	1,0,0,0,79,297,1,0,0,0,81,300,1,0,0,0,83,305,1,0,0,0,85,308,1,0,0,0,87,
  	311,1,0,0,0,89,314,1,0,0,0,91,317,1,0,0,0,93,321,1,0,0,0,95,325,1,0,0,
  	0,97,329,1,0,0,0,99,333,1,0,0,0,101,337,1,0,0,0,103,341,1,0,0,0,105,345,
  	1,0,0,0,107,348,1,0,0,0,109,350,1,0,0,0,111,352,1,0,0,0,113,354,1,0,0,
  	0,115,356,1,0,0,0,117,358,1,0,0,0,119,362,1,0,0,0,121,366,1,0,0,0,123,
  	370,1,0,0,0,125,374,1,0,0,0,127,377,1,0,0,0,129,396,1,0,0,0,131,398,1,
  	0,0,0,133,400,1,0,0,0,135,402,1,0,0,0,137,404,1,0,0,0,139,406,1,0,0,0,
  	141,408,1,0,0,0,143,410,1,0,0,0,145,415,1,0,0,0,147,435,1,0,0,0,149,437,
  	1,0,0,0,151,443,1,0,0,0,153,451,1,0,0,0,155,458,1,0,0,0,157,464,1,0,0,
  	0,159,475,1,0,0,0,161,162,5,83,0,0,162,163,5,78,0,0,163,164,5,85,0,0,
  	164,165,5,81,0,0,165,166,5,65,0,0,166,167,5,83,0,0,167,168,5,77,0,0,168,
  	2,1,0,0,0,169,170,5,59,0,0,170,4,1,0,0,0,171,172,5,105,0,0,172,173,5,
  	110,0,0,173,174,5,99,0,0,174,175,5,108,0,0,175,176,5,117,0,0,176,177,
  	5,100,0,0,177,178,5,101,0,0,178,6,1,0,0,0,179,180,5,113,0,0,180,181,5,
  	114,0,0,181,182,5,101,0,0,182,183,5,103,0,0,183,8,1,0,0,0,184,185,5,91,
  	0,0,185,10,1,0,0,0,186,187,5,93,0,0,187,12,1,0,0,0,188,189,5,99,0,0,189,
  	190,5,114,0,0,190,191,5,101,0,0,191,192,5,103,0,0,192,14,1,0,0,0,193,
  	194,5,103,0,0,194,195,5,97,0,0,195,196,5,116,0,0,196,197,5,101,0,0,197,
  	16,1,0,0,0,198,199,5,123,0,0,199,18,1,0,0,0,200,201,5,125,0,0,201,20,
  	1,0,0,0,202,203,5,40,0,0,203,22,1,0,0,0,204,205,5,41,0,0,205,24,1,0,0,
  	0,206,207,5,111,0,0,207,208,5,112,0,0,208,209,5,97,0,0,209,210,5,113,
  	0,0,210,211,5,117,0,0,211,212,5,101,0,0,212,26,1,0,0,0,213,214,5,109,
  	0,0,214,215,5,101,0,0,215,216,5,97,0,0,216,217,5,115,0,0,217,218,5,117,
  	0,0,218,219,5,114,0,0,219,220,5,101,0,0,220,28,1,0,0,0,221,222,5,45,0,
  	0,222,223,5,62,0,0,223,30,1,0,0,0,224,225,5,114,0,0,225,226,5,101,0,0,
  	226,227,5,115,0,0,227,228,5,101,0,0,228,229,5,116,0,0,229,32,1,0,0,0,
  	230,231,5,105,0,0,231,232,5,102,0,0,232,34,1,0,0,0,233,234,5,61,0,0,234,
  	235,5,61,0,0,235,36,1,0,0,0,236,237,5,98,0,0,237,238,5,97,0,0,238,239,
  	5,114,0,0,239,240,5,114,0,0,240,241,5,105,0,0,241,242,5,101,0,0,242,243,
  	5,114,0,0,243,38,1,0,0,0,244,245,5,85,0,0,245,40,1,0,0,0,246,247,5,117,
  	0,0,247,42,1,0,0,0,248,249,5,67,0,0,249,250,5,88,0,0,250,44,1,0,0,0,251,
  	252,5,44,0,0,252,46,1,0,0,0,253,254,5,105,0,0,254,255,5,100,0,0,255,48,
  	1,0,0,0,256,257,5,104,0,0,257,50,1,0,0,0,258,259,5,120,0,0,259,52,1,0,
  	0,0,260,261,5,121,0,0,261,54,1,0,0,0,262,263,5,122,0,0,263,56,1,0,0,0,
  	264,265,5,115,0,0,265,266,5,120,0,0,266,58,1,0,0,0,267,268,5,115,0,0,
  	268,269,5,121,0,0,269,60,1,0,0,0,270,271,5,115,0,0,271,62,1,0,0,0,272,
  	273,5,115,0,0,273,274,5,100,0,0,274,275,5,103,0,0,275,64,1,0,0,0,276,
  	277,5,116,0,0,277,66,1,0,0,0,278,279,5,116,0,0,279,280,5,100,0,0,280,
  	281,5,103,0,0,281,68,1,0,0,0,282,283,5,114,0,0,283,284,5,120,0,0,284,
  	70,1,0,0,0,285,286,5,114,0,0,286,287,5,121,0,0,287,72,1,0,0,0,288,289,
  	5,114,0,0,289,290,5,122,0,0,290,74,1,0,0,0,291,292,5,117,0,0,292,293,
  	5,49,0,0,293,76,1,0,0,0,294,295,5,117,0,0,295,296,5,50,0,0,296,78,1,0,
  	0,0,297,298,5,117,0,0,298,299,5,51,0,0,299,80,1,0,0,0,300,301,5,115,0,
  	0,301,302,5,119,0,0,302,303,5,97,0,0,303,304,5,112,0,0,304,82,1,0,0,0,
  	305,306,5,99,0,0,306,307,5,120,0,0,307,84,1,0,0,0,308,309,5,99,0,0,309,
  	310,5,121,0,0,310,86,1,0,0,0,311,312,5,99,0,0,312,313,5,122,0,0,313,88,
  	1,0,0,0,314,315,5,99,0,0,315,316,5,104,0,0,316,90,1,0,0,0,317,318,5,99,
  	0,0,318,319,5,114,0,0,319,320,5,120,0,0,320,92,1,0,0,0,321,322,5,99,0,
  	0,322,323,5,114,0,0,323,324,5,121,0,0,324,94,1,0,0,0,325,326,5,99,0,0,
  	326,327,5,114,0,0,327,328,5,122,0,0,328,96,1,0,0,0,329,330,5,99,0,0,330,
  	331,5,117,0,0,331,332,5,49,0,0,332,98,1,0,0,0,333,334,5,99,0,0,334,335,
  	5,117,0,0,335,336,5,50,0,0,336,100,1,0,0,0,337,338,5,99,0,0,338,339,5,
  	117,0,0,339,340,5,51,0,0,340,102,1,0,0,0,341,342,5,99,0,0,342,343,5,99,
  	0,0,343,344,5,120,0,0,344,104,1,0,0,0,345,346,5,112,0,0,346,347,5,105,
  	0,0,347,106,1,0,0,0,348,349,5,45,0,0,349,108,1,0,0,0,350,351,5,43,0,0,
  	351,110,1,0,0,0,352,353,5,42,0,0,353,112,1,0,0,0,354,355,5,47,0,0,355,
  	114,1,0,0,0,356,357,5,94,0,0,357,116,1,0,0,0,358,359,5,115,0,0,359,360,
  	5,105,0,0,360,361,5,110,0,0,361,118,1,0,0,0,362,363,5,99,0,0,363,364,
  	5,111,0,0,364,365,5,115,0,0,365,120,1,0,0,0,366,367,5,116,0,0,367,368,
  	5,97,0,0,368,369,5,110,0,0,369,122,1,0,0,0,370,371,5,101,0,0,371,372,
  	5,120,0,0,372,373,5,112,0,0,373,124,1,0,0,0,374,375,5,108,0,0,375,376,
  	5,110,0,0,376,126,1,0,0,0,377,378,5,115,0,0,378,379,5,113,0,0,379,380,
  	5,114,0,0,380,381,5,116,0,0,381,128,1,0,0,0,382,384,5,34,0,0,383,385,
  	8,0,0,0,384,383,1,0,0,0,385,386,1,0,0,0,386,387,1,0,0,0,386,384,1,0,0,
  	0,387,388,1,0,0,0,388,397,5,34,0,0,389,391,5,39,0,0,390,392,8,1,0,0,391,
  	390,1,0,0,0,392,393,1,0,0,0,393,394,1,0,0,0,393,391,1,0,0,0,394,395,1,
  	0,0,0,395,397,5,39,0,0,396,382,1,0,0,0,396,389,1,0,0,0,397,130,1,0,0,
  	0,398,399,7,2,0,0,399,132,1,0,0,0,400,401,7,3,0,0,401,134,1,0,0,0,402,
  	403,7,4,0,0,403,136,1,0,0,0,404,405,7,5,0,0,405,138,1,0,0,0,406,407,7,
  	6,0,0,407,140,1,0,0,0,408,409,7,7,0,0,409,142,1,0,0,0,410,412,3,147,73,
  	0,411,413,3,149,74,0,412,411,1,0,0,0,412,413,1,0,0,0,413,144,1,0,0,0,
  	414,416,3,135,67,0,415,414,1,0,0,0,416,417,1,0,0,0,417,415,1,0,0,0,417,
  	418,1,0,0,0,418,146,1,0,0,0,419,420,3,145,72,0,420,424,5,46,0,0,421,423,
  	3,135,67,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,425,1,
  	0,0,0,425,436,1,0,0,0,426,424,1,0,0,0,427,429,3,135,67,0,428,427,1,0,
  	0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,
  	430,1,0,0,0,433,434,5,46,0,0,434,436,3,145,72,0,435,419,1,0,0,0,435,430,
  	1,0,0,0,436,148,1,0,0,0,437,439,3,133,66,0,438,440,3,131,65,0,439,438,
  	1,0,0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,442,3,145,72,0,442,150,1,
  	0,0,0,443,447,3,137,68,0,444,446,3,139,69,0,445,444,1,0,0,0,446,449,1,
  	0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,152,1,0,0,0,449,447,1,0,0,0,
  	450,452,7,8,0,0,451,450,1,0,0,0,452,453,1,0,0,0,453,451,1,0,0,0,453,454,
  	1,0,0,0,454,455,1,0,0,0,455,456,6,76,0,0,456,154,1,0,0,0,457,459,7,9,
  	0,0,458,457,1,0,0,0,459,460,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,
  	462,1,0,0,0,462,463,6,77,0,0,463,156,1,0,0,0,464,465,5,47,0,0,465,466,
  	5,47,0,0,466,470,1,0,0,0,467,469,8,9,0,0,468,467,1,0,0,0,469,472,1,0,
  	0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,470,1,0,0,0,473,
  	474,6,78,0,0,474,158,1,0,0,0,475,476,5,47,0,0,476,477,5,42,0,0,477,481,
  	1,0,0,0,478,480,9,0,0,0,479,478,1,0,0,0,480,483,1,0,0,0,481,482,1,0,0,
  	0,481,479,1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,485,5,42,0,0,485,
  	486,5,47,0,0,486,487,1,0,0,0,487,488,6,79,0,0,488,160,1,0,0,0,15,0,386,
  	393,396,412,417,424,430,435,439,447,453,460,470,481,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  snuqasmlexerLexerStaticData = staticData.release();
}

}

snuqasmLexer::snuqasmLexer(CharStream *input) : Lexer(input) {
  snuqasmLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *snuqasmlexerLexerStaticData->atn, snuqasmlexerLexerStaticData->decisionToDFA, snuqasmlexerLexerStaticData->sharedContextCache);
}

snuqasmLexer::~snuqasmLexer() {
  delete _interpreter;
}

std::string snuqasmLexer::getGrammarFileName() const {
  return "snuqasm.g4";
}

const std::vector<std::string>& snuqasmLexer::getRuleNames() const {
  return snuqasmlexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& snuqasmLexer::getChannelNames() const {
  return snuqasmlexerLexerStaticData->channelNames;
}

const std::vector<std::string>& snuqasmLexer::getModeNames() const {
  return snuqasmlexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& snuqasmLexer::getVocabulary() const {
  return snuqasmlexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView snuqasmLexer::getSerializedATN() const {
  return snuqasmlexerLexerStaticData->serializedATN;
}

const atn::ATN& snuqasmLexer::getATN() const {
  return *snuqasmlexerLexerStaticData->atn;
}




void snuqasmLexer::initialize() {
  ::antlr4::internal::call_once(snuqasmlexerLexerOnceFlag, snuqasmlexerLexerInitialize);
}
