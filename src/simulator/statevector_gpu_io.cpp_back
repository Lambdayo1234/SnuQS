#include "simulator.hpp"
#include "gpu_utils.hpp"
#include "gate_gpu.hpp"
#include "socl.hpp"

#include "baio.h"

#include <chrono>
#include <bitset>
#include <unistd.h>

#define QUEUE_DEPTH (1ul << 15)
#define MAX_REQ (2)

namespace snuqs {

// static methods
namespace {


struct Arg {
	const QuantumCircuit *circ;
	void *d_state;
	size_t num_amps;
	gpu::stream_t stream;
	int device;
};

struct IOArg {
	std::vector<std::pair<std::pair<size_t, size_t>, size_t>> ios;
	struct baio_handle *hdlr;
	amp_t *buf;
	//std::vector<socl::CommandQueue> *queues;
};

/*
void apply(void *a) {
	struct Arg *arg = (struct Arg*) a;
	gpu::setDevice(arg->device);
	//			auto s = std::chrono::system_clock::now();
	//			std::cout << *g << ": ";
	//			g->applyGPU(d_state, num_amps, stream);
	//			gpu::deviceSynchronize();
	//			std::chrono::duration<double> sec = (std::chrono::system_clock::now() - s);
	//			std::cout << " : " <<  sec.count() << "s\n";
}
	*/


size_t permute(size_t addr, const std::vector<size_t> &perm) {


	size_t ret = 0;
	size_t mask = 1;
	for (size_t i = 0; i < perm.size(); i++) {
		ret |= ((addr & mask) >> i) << perm[i];
		mask <<= 1;
	}

	return ret;
}

void sort_ios(std::vector<std::pair<std::pair<size_t, size_t>, size_t>> &ios) {

	std::sort(ios.begin(), ios.end(),
	[](auto &pp0, auto &pp1) {
		size_t io_addr0 = pp0.first.first;
		size_t io_addr1 = pp1.first.first;
		return io_addr0 < io_addr1;
	});
}

void io_reads(void *data) {
	std::cout << "io reads\n";
	auto s = std::chrono::system_clock::now();


	IOArg *arg = (IOArg*)data;
	std::vector<std::pair<std::pair<size_t, size_t>, size_t>> &ios = arg->ios;
	struct baio_handle *hdlr = arg->hdlr;
	amp_t *buf = arg->buf;

	size_t max_transfer = (1ul << 27) * hdlr->num_devices;
	int err = 0;
	size_t limit = 0;
	for (auto &&pp : ios) {
		size_t io_addr = pp.first.first * sizeof(amp_t);
		size_t offset = pp.first.second * sizeof(amp_t);
		size_t count = pp.second;
		size_t size = count * sizeof(amp_t);
//		std::cout 
//		<< "io_addr: " << io_addr << ", "
//		<< "offset: " << offset << ", "
//		<< "size: " << size << "\n";
		while (size > 0) {
			size_t transfer_size = size;
			if (transfer_size > max_transfer) {
				transfer_size = max_transfer;
			}
			//std::cout << size << " " << transfer_size << " " << io_addr << "\n";
			err = baio_queue_read(hdlr, ((char*)buf) + offset, transfer_size, io_addr);
			assert(!err);

			io_addr += transfer_size;
			offset += transfer_size;
			size -= transfer_size;
			limit += transfer_size;

			if ((limit+transfer_size) > max_transfer) {
				std::cout << "submit read\n";

				err = baio_queue_submit(hdlr);
				assert(!err);

				err = baio_wait_all(hdlr);
				assert(!err);

				limit = 0;
			}
		}
	}

	err = baio_queue_submit(hdlr);
	assert(!err);

	err = baio_wait_all(hdlr);
	assert(!err);

	delete arg;

	std::chrono::duration<double> sec = (std::chrono::system_clock::now() - s);
	std::cout << "io reads done " << sec.count() << "s\n";
}

void io_writes(void *data) {
	std::cout << "io writes\n";
	auto s = std::chrono::system_clock::now();

	IOArg *arg = (IOArg*)data;
	std::vector<std::pair<std::pair<size_t, size_t>, size_t>> &ios = arg->ios;
	struct baio_handle *hdlr = arg->hdlr;
	amp_t *buf = arg->buf;

//	std::vector<socl::CommandQueue> &queues = *(arg->queues);
//	for (size_t i = 0; i < queues.size(); i++) {
//		//gpu::setDevice(i % queues.size());
//		socl::enqueueSynchronize(&queues[i]);
//	}

	size_t max_transfer = (1ul << 27) * hdlr->num_devices;
	int err = 0;
	size_t limit = 0;
	for (auto &&pp : ios) {
		size_t io_addr = pp.first.first * sizeof(amp_t);
		size_t offset = pp.first.second * sizeof(amp_t);
		size_t count = pp.second;
		size_t size = count * sizeof(amp_t);
//		std::cout 
//		<< "io_addr: " << io_addr << ", "
//		<< "offset: " << offset << ", "
//		<< "size: " << size << "\n";

		while (size > 0) {
			size_t transfer_size = size;
			if (transfer_size > max_transfer) {
				transfer_size = max_transfer;
			}
			//std::cout << size << " " << transfer_size << " " << io_addr << "\n";
			err = baio_queue_write(hdlr, ((char*)buf) + offset, transfer_size, io_addr);
			assert(!err);

			io_addr += transfer_size;
			offset += transfer_size;
			size -= transfer_size;
			limit += transfer_size;

			if ((limit+transfer_size) > max_transfer) {
				std::cout << "submit write\n";
				err = baio_queue_submit(hdlr);
				assert(!err);

				err = baio_wait_all(hdlr);
				assert(!err);

				limit = 0;
			}
		}
	}
	err = baio_queue_submit(hdlr);
	assert(!err);

	err = baio_wait_all(hdlr);
	assert(!err);

	delete arg;
	std::chrono::duration<double> sec = (std::chrono::system_clock::now() - s);
	std::cout << "io writes done " << sec.count() << "s\n";
}

void post_reads(size_t start, size_t size, size_t count, std::vector<size_t> perm,
		std::vector<socl::CommandQueue> &queues,
		struct baio_handle &hdlr,
		amp_t *buf,
		gpu::stream_t iostream
		)
{
	std::cout << "post reads " 
	<< "start: " << start  << " "
	<< "size: " << size  << " "
	<< "count: " << count  << "\n";

	if (size < count) count = size;

	IOArg *ioarg = new IOArg();
	ioarg->hdlr = &hdlr;
	ioarg->buf = buf;
	//ioarg->queues = &queues;
	for (size_t c = start; c < start+size; c += count) {
		size_t io_addr = permute(c, perm);
		ioarg->ios.push_back({{io_addr, c-start}, std::min(start+size - c, count)});
	}
	sort_ios(ioarg->ios);
	gpu::launchHostFunc(iostream, io_reads, (void*)ioarg);
}

void post_writes(size_t start, size_t size, size_t count, std::vector<size_t> perm,
		std::vector<socl::CommandQueue> &queues,
		struct baio_handle &hdlr,
		amp_t *buf,
		gpu::stream_t iostream
		)
{
	std::cout << "post writes " 
	<< "start: " << start  << " "
	<< "size: " << size  << " "
	<< "count: " << count  << "\n";

	if (size < count) count = size;
	IOArg *ioarg = new IOArg();
	ioarg->hdlr = &hdlr;
	ioarg->buf = buf;
	//ioarg->queues = &queues;
	for (size_t c = start; c < start+size; c += count) {
		size_t io_addr = permute(c, perm);
		ioarg->ios.push_back({{io_addr, c-start}, std::min(start+size - c, count)});
	}
	sort_ios(ioarg->ios);
	gpu::launchHostFunc(iostream, io_writes, (void*)ioarg);
}
*/

/*
void wait_ios(std::vector<socl::CommandQueue> &queues, struct baio_handle &hdlr, gpu::stream_t iostream)
{
	for (size_t i = 0; i < queues.size(); i++) {
		gpu::setDevice(i % queues.size());
		socl::enqueueSynchronize(&queues[i]);
	}

	gpu::streamSynchronize(iostream);

//	int err = baio_wait_all(&hdlr);
//	assert(!err);
}
P*/

/*
void simulate(const std::vector<QuantumCircuit> &circs,
		std::vector<amp_t*> &state_pair,
		std::vector<amp_t*> &d_states,
		size_t num_amps, 
		size_t nbuf,
		struct baio_handle &hdlr,
		size_t iobuf_elems,
		gpu::stream_t iostream,
		amp_t *temp_buf,
		size_t ioblock
		) {

	//size_t size = sizeof(snuqs::amp_t) * num_amps;
	
	gpu::setDevice(0);
	gpu::init(d_states[0], num_amps, queues[0].stream);

	std::vector<cudaEvent_t> events(queues.size());
	for (size_t i = 0; i < events.size(); i++) {
		gpu::setDevice(i % nbuf);
		gpu::eventCreate(&events[i]);
	}

	std::vector<cudaEvent_t> ioevents(2);
	gpu::setDevice(0);
	gpu::eventCreate(&ioevents[0]);
	gpu::eventCreate(&ioevents[1]);

	//size_t iobuf_cnt = iobuf_elems / num_amps;
	size_t num_qubits = circs[0].num_qubits();
	size_t min_cnt = (1ul << (2 * MAX_INMEM - num_qubits));
	size_t pidx = 0;
	size_t off = (1ul << std::min(num_qubits - MAX_INMEM, IOBUF_SHIFT));
	if (num_qubits <= MAX_IOBUF_SHIFT) {
		off = (1ul << (num_qubits - MAX_INMEM - 1));
	}
	for (size_t c = 0; c < circs.size(); c++)  {
		auto &circ = circs[c];
		auto &perm = circ.permutation();
		for (auto q : perm) {
			std::cout << q << " ";
		}
			std::cout << "\n";

		
		//size_t count = (1ul << (2 * MAX_INMEM - num_qubits));
		//size_t count = ioblock;
		//size_t count = (hdlr.block_size_per_device / sizeof(amp_t)) * 8;
		//size_t count = (1ul << (2 * MAX_INMEM - num_qubits)) * 8;
		size_t count = (1ul << (2 * MAX_INMEM - num_qubits));
		pidx = 0;


//		if (c != 0) {
//			post_reads(0, iobuf_elems, count, perm, queues, hdlr, state_pair[pidx], iostream);
//			gpu::setDevice(0);
//			gpu::enqueueEvent(iostream, ioevents[0]);
//		}

		//int ndevices = gpu::getNumDevices();
		size_t niter = (1ul << num_qubits) / num_amps;
		if (c == 0) {
			niter = 2;
		}

		for (size_t it = 0; it < niter; it += off) {
			//amp_t *buffer = state_pair[pidx];
			for (size_t i = 0; i < events.size(); i++) {
				auto & stream = queues[i].stream;
				gpu::streamWaitEvent(stream, ioevents[pidx]);
			}

			for (size_t iter = it; iter < std::min(it + off, niter); iter++) {
				auto s = std::chrono::system_clock::now();

				size_t no = (iter % nbuf);
				auto & q = queues[no];
				auto & stream = q.stream;
				//auto & state = states[no];
				//auto state = &buffer[num_amps*(iter % iobuf_cnt)];
				auto & d_state = d_states[no];

				gpu::setDevice(no);
				//socl::enqueueSynchronize(&q);

				if (c != 0) {
					if (c == 1) {
						gpu::zero(&d_state[min_cnt], num_amps - min_cnt, stream);
						//socl::enqueueH2D(&q, d_state, &temp_buf[iter * min_cnt], min_cnt * sizeof(amp_t));
					} else {
						//socl::enqueueH2D(&q, d_state, state, size);
					}
				}

				for (const auto &g : circ.gates()) {
					g->applyGPU(d_state, num_amps, (num_amps*(iter+1)-1), stream);
				}

				if (c == 0) {
					//socl::enqueueD2H(&q, temp_buf, d_state, size);
				} else {
					//socl::enqueueD2H(&q, state, d_state, size);
				}

				std::chrono::duration<double> sec = (std::chrono::system_clock::now() - s);
				std::cout << "Circuit #" << c << " Iteration " << (iter+1) << "/" << niter << " : " <<  sec.count() << "s\n";
			}

			for (size_t i = 0; i < nbuf; ++i) {
				gpu::setDevice(i);
				auto & stream = queues[i].stream;
				gpu::enqueueEvent(stream, events[i]);
			}
	
			if (c > 1) {
				if (it+off < niter) {
					post_reads((it+off) * num_amps, iobuf_elems, count, perm, queues, hdlr, state_pair[(pidx+1)%2], iostream);
					gpu::setDevice(0);
					gpu::enqueueEvent(iostream, ioevents[(pidx+1)%2]);
				}
			} else if (c == 1 && c < circs.size()-1 && (it+off >= niter)) {
				post_reads(0, iobuf_elems - min_cnt, count, circs[c+1].permutation(), queues, hdlr, state_pair[0], iostream);
				gpu::setDevice(0);
				gpu::enqueueEvent(iostream, ioevents[0]);
			}

			for (size_t i = 0; i < events.size(); i++) {
				gpu::streamWaitEvent(iostream, events[i]);
			}

			if (c > 1) {
				post_writes(it * num_amps, iobuf_elems, count, perm, queues, hdlr, state_pair[pidx], iostream);
			} else if (c == 1) {
				if (it+off < niter || circs.size() < 2) {
					post_writes(it * num_amps, iobuf_elems, count, perm, queues, hdlr, state_pair[pidx], iostream);
				} else {
					post_writes(it * num_amps, iobuf_elems-min_cnt, count, perm, queues, hdlr, state_pair[pidx], iostream);
				}
			}
			pidx = (pidx+1)%2;
		}
	}
	gpu::setDevice(0);
	gpu::streamSynchronize(iostream);

	for (size_t i = 0; i < events.size(); i++) {
		gpu::eventDestroy(events[i]);
	}
}
*/

} // static methods

void StatevectorGPUIOSimulator::init(size_t num_qubits) {
	std::cout << "Statevector GPU-IO Simulator\n";
	std::cout << "Number of qubits: " << num_qubits << "\n";

	auto s = std::chrono::system_clock::now();

	int err = baio_init(&hdlr_, QUEUE_DEPTH, "baio.config");
	assert(!err);

	size_t ndev = hdlr_.num_devices;

	//size_t nelems = (1ul << num_qubits);
	iobuf_elems_ = (1ul << std::min(MAX_IOBUF_SHIFT, num_qubits));
	if (num_qubits <= MAX_IOBUF_SHIFT)
		iobuf_elems_ = (1ul << (num_qubits-1));

	size_t continous = (iobuf_elems_ / (1ul << MAX_INMEM));
	size_t minimal_io_elems = (1ul << (2*MAX_INMEM-num_qubits)) * continous;

	//size_t block_elems = std::min(minimal_io_elems, (iobuf_elems_ + ndev + 1) / ndev);
	size_t block_elems = std::min(minimal_io_elems, ((1ul << 29) + ndev - 1) / ndev);
	baio_setup_blocks(&hdlr_,
			block_elems * sizeof(amp_t),
			iobuf_elems_ * sizeof(amp_t),
			(1ul << MAX_INMEM) * sizeof(amp_t),
			(1ul << (2 * MAX_INMEM - num_qubits)) * sizeof(amp_t) * continous);


	num_amps_ = (1ul << MAX_INMEM);
	nbuf_ = std::min(gpu::getNumDevices(), (1ul << (num_qubits-MAX_INMEM)));
	d_states_.resize(nbuf_);
	//queues_.resize(nbuf_);
	for (size_t d = 0; d < nbuf_; d++) {
		gpu::setDevice(d);
		gpu::Malloc((void**)&d_states_[d], sizeof(amp_t) * num_amps_);
		//socl::initCommandQueue(&queues_[d], 16);
	}

	amp_t *state0, *state1;
	gpu::MallocHost((void**)&state0, iobuf_elems_ * sizeof(amp_t));
	gpu::MallocHost((void**)&state1, iobuf_elems_ * sizeof(amp_t));
	state_pair_.push_back(state0);
	state_pair_.push_back(state1);

	gpu::setDevice(0);
	gpu::streamCreate(&iostream_);
	gpu::MallocHost((void**)&temp_buf_, (1ul << MAX_INMEM) * sizeof(amp_t));

	std::chrono::duration<double> sec = (std::chrono::system_clock::now() - s);
	std::cout << "Setup time: " << sec.count() << "s\n";
}

void StatevectorGPUIOSimulator::deinit() {
	//return;
	auto s = std::chrono::system_clock::now();
	baio_finalize(&hdlr_);
	for (size_t d = 0; d < nbuf_; d++) {
		//socl::deinitCommandQueue(&queues_[d]);
		gpu::Free(d_states_[d]);
	}
	gpu::FreeHost(state_pair_[0]);
	gpu::FreeHost(state_pair_[1]);

	gpu::streamDestroy(iostream_);
	std::chrono::duration<double> sec = (std::chrono::system_clock::now() - s);
	std::cout << "Teardown time: " << sec.count() << "s\n";
}

void StatevectorGPUIOSimulator::run(const std::vector<QuantumCircuit> &circs) {
	//return;
	std::cout << "Simulation start..\n";
	auto s = std::chrono::system_clock::now();
	ate(circs, state_pair_, d_states_,  queues_, num_amps_, nbuf_, hdlr_, iobuf_elems_, iostream_, temp_buf_, ioblock_);
//	simulate(circs, state_pair_, d_states_, num_amps_, nbuf_, hdlr_, iobuf_elems_, iostream_, temp_buf_, ioblock_);
	std::chrono::duration<double> sec = (std::chrono::system_clock::now() - s);
	std::cout << "Simulation Time: " << sec.count() << "s\n";
}

} // namespace snuqs

